/**
 * Copyright (c) Benedikt Meurer @bmeurer.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";

const autoprefixer = require("autoprefixer");
const args = require("minimist")(process.argv);
const cssnano = require("cssnano");
const del = require("del");
const gulp = require("gulp");
const htmlmin = require("gulp-htmlmin");
const jsonminify = require("gulp-jsonminify");
const merge = require("merge-stream");
const noop = require("gulp-noop");
const postcss = require("gulp-postcss");
const sass = require("gulp-sass");
const shell = require("gulp-shell");
const uglify = require("gulp-uglify");
const util = require("util");
const workbox = require("workbox-build");

const destDir = `${__dirname}/dist`;
const srcDir = `${__dirname}/src`;

/** Builds (and optionally minifies) the HTML files */
function buildHTML() {
  return util
    .promisify(shell.task("eleventy", { quiet: true }))()
    .then(() => {
      // Minify the resulting HTML for production builds.
      if (args.production) {
        return gulp
          .src(`${destDir}/**/*.html`)
          .pipe(
            htmlmin({
              collapseBooleanAttributes: true,
              collapseInlineTagWhitespace: false,
              collapseWhitespace: true,
              conservativeCollapse: false,
              decodeEntities: true,
              html5: true,
              includeAutoGeneratedTags: false,
              minifyCSS: true,
              minifyJS: true,
              preserveLineBreaks: false,
              preventAttributesEscaping: true,
              removeAttributeQuotes: true,
              removeComments: true,
              removeEmptyAttributes: true,
              removeEmptyElements: false, // TODO(bmeurer): The <label> for the sidebar is empty.
              removeRedundantAttributes: true,
              removeTagWhitespace: false,
              sortAttributes: true,
              sortClassName: true
            })
          )
          .pipe(gulp.dest(destDir));
      }
    });
}

/** Builds (and optionally minifies) the JSON files */
function buildJSON() {
  return gulp
    .src(`${srcDir}/manifest.json`)
    .pipe(args.production ? jsonminify() : noop())
    .pipe(gulp.dest(destDir));
}

/** Builds (and optionally minifies) the sw.js */
function buildServiceWorker() {
  return workbox
    .generateSW({
      skipWaiting: true,
      cacheId: "benediktmeurer.de",
      offlineGoogleAnalytics: true,
      globDirectory: destDir,
      globPatterns: [
        "css/main.css",
        "favicon.ico",
        "fonts/*.woff2",
        "images/icons.svg",
        "index.html",
        "js/main.js"
      ],
      swDest: `${destDir}/sw.js`,
      templatedUrls: {
        "/": ["index.html"]
      }
    })
    .then(({ warnings }) => {
      // Log any warnings from workbox-build.
      for (const warning of warnings) {
        console.warn(warning);
      }

      // Minify the resulting sw.js for production builds.
      if (args.production) {
        return gulp
          .src(`${destDir}/sw.js`)
          .pipe(uglify())
          .pipe(gulp.dest(`${destDir}`));
      }
    });
}

/** Builds (and optionally minifies) the JavaScript files */
function buildScripts() {
  return gulp
    .src(`${srcDir}/js/*.js`)
    .pipe(args.production ? uglify() : noop())
    .pipe(gulp.dest(`${destDir}/js`));
}

/** Builds (and optionally minifies) the CSS files */
function buildStyles() {
  return merge(
    gulp.src(`${srcDir}/css/*.css`),
    gulp.src(`${srcDir}/css/*.scss`).pipe(sass().on("error", sass.logError))
  )
    .pipe(postcss([autoprefixer()].concat(args.production ? [cssnano()] : [])))
    .pipe(gulp.dest(`${destDir}/css`));
}

/** Copy resources */
function copyResources() {
  return gulp
    .src(`${srcDir}/{{files,fonts,images}/**/*.*,favicon.ico}`)
    .pipe(gulp.dest(destDir));
}

/** Cleans the generated artifacts */
function clean() {
  return del([destDir]);
}

const build = gulp.parallel(
  buildJSON,
  copyResources,
  gulp.series(
    gulp.parallel(buildHTML, buildScripts, buildStyles),
    buildServiceWorker
  )
);

exports.build = build;
exports.clean = clean;

exports.default = build;
